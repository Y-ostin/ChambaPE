# ===============================
# ChambaPE - Dockerfile Producción
# Optimizado para EC2 + S3 + RDS
# ===============================

# Etapa 1: Build
FROM node:18-alpine AS builder

WORKDIR /app

# Copiar archivos de dependencias
COPY package*.json ./
COPY tsconfig*.json ./
COPY nest-cli.json ./

# Instalar dependencias
RUN npm ci --only=production && npm cache clean --force

# Copiar código fuente
COPY src/ ./src/

# Build de la aplicación
RUN npm run build

# ===============================
# Etapa 2: Producción
FROM node:18-alpine AS production

# Crear usuario no-root
RUN addgroup -g 1001 -S nodejs
RUN adduser -S nestjs -u 1001

WORKDIR /app

# Instalar dumb-init y wget para health checks
RUN apk add --no-cache dumb-init wget

# Copiar dependencias de producción
COPY --from=builder /app/node_modules ./node_modules

# Copiar aplicación compilada
COPY --from=builder /app/dist ./dist
COPY --from=builder /app/package*.json ./

# Crear directorio para uploads (si usa almacenamiento local temporal)
RUN mkdir -p /app/uploads && chown -R nestjs:nodejs /app

# Cambiar a usuario no-root
USER nestjs

# Exponer puerto
EXPOSE 3000

# Variables de entorno por defecto
ENV NODE_ENV=production
ENV PORT=3000

# Health check básico
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1

# Usar dumb-init para manejo correcto de señales
ENTRYPOINT ["dumb-init", "--"]

# Comando por defecto
CMD ["node", "dist/main.js"]
